import os
import nucleotide


Import('settings')

name_full = 'test'

settings.set_custom( 'RTL', 'dynamic' )
settings.set_custom( 'architecture', 'i386' )

configuration = settings.get_custom( 'configuration' )

directory_pdb = '../../out/'+os.name+'/bin-' + configuration + '/'
directory_obj = '../../out/'+os.name+'/bin-' + configuration + '/'
directory_exe = '../../out/'+os.name+'/'
directory_source  = '../../src'
directory_example = '../../example'


# Accumulate Atoms
settings.accumulate( 'include', { '0' : '../../src' } )
settings.accumulate( 'architecture', { 'name' : settings.get_custom( 'architecture' ) } )
settings.accumulate( 'exception' )
settings.accumulate( 'source:c++', { 'dialect' : 'c++11' } )
settings.accumulate( 'RTTI', { 'enable': 'false' } )
settings.accumulate( 'compiler:configuration', { 'name'          : configuration  } )
settings.accumulate( 'compiler:optimisation',  { 'configuration' : configuration  } )
settings.accumulate( 'compiler:version',  { 'msvc' : [ settings.get_custom( 'compiler_version_msvc' ) ] } )

settings.accumulate( 'PDB', { 'configuration': configuration , 'synchronous' : 'false', 'file-name': os.path.join( directory_pdb, name_full + '.pdb' ) } )
settings.accumulate( 'RTL', { 'configuration' : configuration, 'type': settings.get_custom( 'RTL' ) } )

#settings.accumulate( 'macro',  { 'name' : 'COLOR_USE_PP2FILE'  } )

# Accumulate source
envObject = nucleotide.Environment( settings ).native()


source = []

source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'event/generator/pure'  ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/event/generator/pure.cpp' ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'element/basic'         ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/element/basic.cpp' ) ]

source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/background'  ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/background.cpp' ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/box'         ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/box.cpp'        ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/circle'      ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/circle.cpp'     ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/flush'       ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/flush.cpp'      ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/lock'        ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/lock.cpp'       ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/pixel'       ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/pixel.cpp'      ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/text'        ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/text.cpp'       ) ]
source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'primitive/unlock'      ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/primitive/unlock.cpp'     ) ]

if os.name == 'nt' :
    source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'canvas/win32'          ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/canvas/win32.cpp' )  ]
    source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'event/generator/win32' ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/event/generator/win32.cpp' ) ]

if os.name == 'posix' :
    source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'canvas/xlib'           ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/canvas/xlib.cpp' )  ]
    source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'event/generator/xlib'  ) + envObject[ 'OBJSUFFIX' ],  source = directory_source + '/widget/event/generator/xlib.cpp' ) ]

source += [ envObject.StaticObject( target =  os.path.join( directory_obj, 'reaction'        ) + envObject[ 'OBJSUFFIX' ],  source = directory_example + '/reaction.cpp' ) ]




# Make native environment
envProgram = nucleotide.Environment( settings ).native()

if os.name == 'nt' :
    envProgram.Append( LIBS = ['User32.lib'] )
    envProgram.Append( LIBS = ['Gdi32.lib'] )

if os.name == 'posix' :
    envProgram.Append( LIBS = ['X11'] )

# Create program
program = envProgram.Program( target =  directory_exe+ 'test' + envProgram['PROGSUFFIX'], source = source )

# ... and return!
Return( 'program' )
